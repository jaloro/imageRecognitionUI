// 通用函数库 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| //
/* 依赖库
	colors.js  -- printf()
	fs -- delDir()
*/

let _true = 'true'.green;
let _false = 'false'.red;
exports.on = _true;
exports.off = _false;
exports.true = _true;
exports.false = _false;

global.defaultIndent = "    ";	// 用于对象打印时的层级缩进

// 【 定义函数 】 - 测试函数 ===================================================================================================
function test(){
	let _test2 = arguments.length == 0 || !!arguments[ 0 ];
	console.log( _test2 );
}
exports.test = test;

// 【 定义函数 】 - 屏幕输出 ===================================================================================================
function print( a_arg ) {
	if ( arguments.length < 1 ) return;
	console.log( a_arg );
	if ( global.rl ) global.rl.prompt();
}
exports.print = print;

// 【 定义函数 】 - 格式化屏幕输出 =============================================================================================
function printf() {
	if ( arguments.length < 1 ) return;
	let _temp = "";
	for ( let _i = 0; _i < arguments.length; _i ++ )	{	// 把要打印的简单数据连接成带颜色格式的字符串
		switch ( typeofByIndex( arguments[ _i ] ) ) {
			case 1:	// number
				_temp = ( _temp == "" ? ( String( arguments[ _i ] ) ).yellow : _temp + ', '.grey + ( String( arguments[ _i ] ) ).yellow );
				break;
			case 2:	// string
				_temp = ( _temp == "" ? ( "'" + arguments[ _i ] + "'" ).green : _temp + ', '.grey + ( "'" + arguments[ _i ] + "'" ).green );
				break;
			case 3: // boolean
				_temp = ( _temp == "" ? ( ( arguments[ _i ] ) ? 'true'.green.inverse : 'false'.red.inverse ) : ( _temp + ', '.grey + ( ( arguments[ _i ] ) ? 'true'.green.inverse : 'false'.red.inverse ) ) );
				break;
			case 4:	// undefined
				_temp = ( _temp == "" ? 'undefined'.red : _temp + ', '.grey + 'undefined'.red );
				break;
			case 5:	// null
				_temp = ( _temp == "" ? 'null'.red : _temp + ', '.grey + 'null'.red );
				break;
			case 6:	// array
				_temp = ( _temp == "" ? '[ array ]'.cyan : _temp + ', '.grey + '[ array ]'.cyan );
				break;
			case 7:	// object
				_temp = ( _temp == "" ? '{ object }'.cyan : _temp + ', '.grey + '{ object }'.cyan );
				// _args.push( arguments[ _i ] );	// 把数组或复杂对象放入临时数组中
				break;
			case 8:	// function
				_temp = ( _temp == "" ? '{ function }'.cyan : _temp + ', '.grey + '{ function }'.cyan );
				break;
			case 9:	// buffer
				let _buf = "<Buffer";
				let _j = 0;
				for ( _j = 0; _j < 10; _j ++ ) { if ( _j < arguments[ _i ].length ) { _buf = _buf + " " + arguments[ _i ][ _j ].toString( 16 ); } }
				_buf += ( _j < arguments[ _i ].length ) ? " ...>" : ">";
				_temp = ( _temp == "" ? _buf.cyan : _temp + ', '.grey + _buf.cyan );
				// _temp = ( _temp == "" ? '[ buffer ]'.cyan : _temp + ', '.grey + '[ buffer ]'.cyan );
				break;
		}
	}
	if ( _temp != "" ) console.log( _temp );
	// if ( global.rl ) global.rl.prompt();
}
exports.printf = printf;	// 让函数可被作为模块函数被外界访问，等效于 // module.exports.printf = printf;

// 【 定义函数 】 - 对象展开输出
function printObject( a_object, a_subLevel = 0, a_preIndent = "", a_sub = false ) {	// a_subLevel 参数表示打印下层层级, 0 - 打印所有层级
	let _rtn = "";
	let _indent = defaultIndent || "\t";
	let _isStart = true;
	let _typeIndex = typeofByIndex( a_object );
	if ( _typeIndex < 6 ) {				// 普通值
		switch ( _typeIndex ) {
			case 0:	// unkown
				_rtn = a_preIndent + "unkown".error;
			case 1:	// number
				_rtn = a_preIndent + ( "" + a_object ).yellow;
				break;
			case 2:	// string
				_rtn = a_preIndent + ( "'" + a_object + "'" ).cyan;
				break;
			case 3: // boolean
				_rtn = a_preIndent + ( a_object ? 'true'.green.underline : 'false'.red.underline );
				break;
			case 4:	// undefined
				_rtn = a_preIndent + "undefined".red;
				break;
			case 5:	// null
				_rtn = a_preIndent + "null".red;
				break;
		}
	} else if ( _typeIndex == 6 ) {		// 数组值
		if ( a_object.length < 1 ) { return ( a_sub ? "" : a_preIndent ) + '[]'; }
		// let _object = JSON.parse( JSON.stringify( a_object ) );		// 遍历前用深拷贝去除参数对象中多余的枚举属性（可能会造成出现多余的莫名字段）
		_rtn = ( a_sub ? "" : a_preIndent ) + "[\n";
		for ( let _i = 0; _i < a_object.length; _i++ )
		{
			switch ( typeofByName( a_object[ _i ] ) ) {
				case "number":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + ( "" + a_object[ _i ] ).yellow;
					break;
				case "string":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + ( "'" + a_object[ _i ] + "'" ).green;
					break;
				case "boolean":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + ( a_object[ _i ] ? _true.underline : _false.underline );
					break;
				case "undefined":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + "undefined".error;
					break;
				case "null":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + "null".error;
					break;
				case "array":
					if ( a_subLevel != 1 ) {
						_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + printObject( a_object[ _i ], a_subLevel - 1, a_preIndent + _indent, true );
					} else {
						_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + "[ array ]".cyan;
					}
					break;
				case "object":
					if ( a_subLevel != 1 ) {
						_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + printObject( a_object[ _i ], a_subLevel - 1, a_preIndent + _indent, true );
					} else {
						_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + "{ object }".cyan;
					}
					break;
				case "function":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + "{ function }".cyan;
					break;
				case "buffer":
					let _buf = "<Buffer";
					let _j = 0;
					for ( _j = 0; _j < 10; _j ++ ) { if ( _j < a_object[ _i ].length ) { _buf = _buf + " " + a_object[ _i ][ _j ].toString( 16 ); } }
					_buf += ( _j < a_object[ _i ].length ) ? " ...>" : ">";
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _buf.cyan;
					break;
				case "unknow":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + "< unknow >".cyan;
					break;
			}
			_isStart = false;
		}
		_rtn = _rtn + "\n" + a_preIndent + "]";
	} else if ( _typeIndex == 7 ) {		// 对象值
		if ( isEmptyObject( a_object ) ) { return ( a_sub ? "" : a_preIndent ) + '{}'; }
		// let _object = JSON.parse( JSON.stringify( a_object ) );		// 遍历前用深拷贝去除参数对象中多余的枚举属性（可能会造成出现多余的莫名字段）
		_rtn = ( a_sub ? "" : a_preIndent ) + "{\n";
		for ( let _key in a_object ) {
			_v = "";
			switch ( typeofByName( a_object[ _key ] ) ) {
				case "number":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + ( "" + a_object[ _key ] ).yellow;
					break;
				case "string":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + ( "'" + a_object[ _key ] + "'" ).green;
					break;
				case "boolean":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + ( a_object[ _key ] ? _true : _false ).underline;
					break;
				case "undefined":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + "undefined".error;
					break;
				case "null":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + "null".error;
					break;
				case "array":
					if ( a_subLevel != 1 ) {
						_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + printObject( a_object[ _key ], a_subLevel - 1, a_preIndent + _indent, true );
					} else {
						_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + "[ array ]".cyan;
					}
					break;
				case "object":
					if ( a_subLevel != 1 ) {
						_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + printObject( a_object[ _key ], a_subLevel - 1, a_preIndent + _indent, true );
					} else {
						_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + "{ object }".cyan;
					}
					break;
				case "function":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + "{ function }".cyan;
					break;
				case "buffer":
					let _buf = "<Buffer";
					let _j = 0;
					for ( _j = 0; _j < 10; _j ++ ) { if ( _j < a_object[ _key ].length ) { _buf = _buf + " " + a_object[ _key ][ _j ].toString( 16 ); } }
					_buf += ( _j < a_object[ _key ].length ) ? " ...>" : ">";
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + _buf.cyan;
					break;
				case "unknow":
					_rtn = _rtn + ( _isStart ? "" : ",\n" ) + a_preIndent + _indent + _key + ': ' + "< unknow >".cyan;
					break;
			}
			_isStart = false;
		}
		_rtn = _rtn + "\n" + a_preIndent + "}";
	} else if ( _typeIndex == 8 ) {
		_rtn = a_preIndent + "{ function }".cyan;
	} else if ( _typeIndex == 9 ) {
		let _buf = "<Buffer";
		let _j = 0;
		for ( _j = 0; _j < 10; _j ++ ) { if ( _j < a_object.length ) { _buf = _buf + " " + a_object[ _j ].toString( 16 ); } }
		_buf += ( _j < a_object.length ) ? " ...>" : ">";
		_rtn = a_preIndent + _buf.cyan;
	}
	if ( a_sub ) { return _rtn; }
	else {
		console.log( _rtn );
		// if ( global.rl ) global.rl.prompt();
	}
}
exports.printObject = printObject;

// 【 定义函数 】 - 删除文件夹及文件夹下的所有文件（同步模式） *注：a_delSelf 为 true 时，删除文件夹自身，为 false 时，保留文件夹自身，默认为 true, 此操作需要 fs 库支持，请确保在调用前已经加载了 fs 库并保存在全局对象 global 中
function delDir( a_path, a_delSelf = true ) {
	let _files = [];
	if ( fs.existsSync( a_path ) ) {
		_files = fs.readdirSync( a_path );
		_files.forEach( ( _file, _index ) => {
			let _curPath = a_path + "/" + _file;
			if ( fs.statSync( _curPath ).isDirectory() ) {
				delDir( _curPath );			//递归删除文件夹
			} else {
				try {
					fs.unlinkSync( _curPath );	//删除文件
				}
				catch ( err ) {
					console.log( err );
				}
			}
		});
		if ( a_delSelf == true ) {		// 是否删除自身
			try {
				fs.rmdirSync( a_path );
			}
			catch ( err ) {
				console.log( err );
			}
		}
	}
}
exports.delDir = delDir;
/*
// 删除目录的方法		// *注：使用 await 来利用异步函数实现同步执行 ？
const fs = require('fs').promises //node 10+ 版本
// const fs = require('mz/fs')  // 低于 node 10.0.0 版本
const path = require('path')
async function rmdirAsync(filePath) {
	let stat = await fs.stat(filePath)
	if (stat.isFile()) {
		await fs.unlink(filePath)
	} else {
		let dirs = await fs.readdir(filePath)
		dirs = dirs.map(dir => rmdirAsync(path.join(filePath, dir)))
		await Promise.all(dirs)
		await fs.rmdir(filePath)
	}
}
rmdirAsync('./letter/csv').then(() => {
	console.log('删除成功')
})
*/

// 【 定义函数 】 - 统计文件夹下的文件数量
function filesNum( a_path, a_sub = false ) {
	let _filesNum = 0;
	let _foldersNum = 0;
	let _files = [];
	if( fs.existsSync( a_path ) ) {
		_files = fs.readdirSync( a_path );
		_files.forEach( ( _file, _index ) => {
			let _curPath = a_path + "/" + _file;
			if ( fs.statSync( _curPath ).isDirectory() ) {
				_foldersNum ++;
				if ( a_sub == true ) {
					let _rtn = filesNum( _curPath, a_sub );
					_filesNum = _filesNum + _rtn[ "filesNum" ];
					_foldersNum = _foldersNum + _rtn[ "foldersNum" ];
				}
			} else {
				_filesNum ++;
			}
		});
	}
	return { "filesNum":_filesNum, "foldersNum":_foldersNum };
}
exports.filesNum = filesNum;

// 【 定义函数 】 - 获取本机电脑IP
function getIPAdress() {
	let interfaces = require('os').networkInterfaces();
	for ( let devName in interfaces ) {
		let iface = interfaces[ devName ];
		for ( let i = 0; i < iface.length; i++ ) {
			let alias = iface[ i ];
			if ( alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal ) {
				// console.log(alias.address);
				return alias.address
			}
		}
	}
}
exports.getIPAdress = getIPAdress;
// 其次，结合webpack.DefinePlugin设置一个变量去存储获取到的IP
// new webpack.DefinePlugin({
// 	'process.env': {
// 	SERVERIP:JSON.stringify({"serverIp":serverIp}) // 将本地电脑IP用变量存起来，便于在本地测试时使用
// 	}
// })

// 【 定义函数 】 - 判断数据类型 - 返回值为索引值：0-未知类型; 1-数字; 2-字符; 3-布尔; 4-未定义; 5-null; 6-数组; 7-对象 ============
function typeofByIndex( a_arg ) {
	let _type = typeof( a_arg );
	return ( _type == 'number' && 1 ) || ( _type == 'string' && 2 ) || ( _type == 'boolean' && 3 ) || ( _type == 'undefined' && 4 ) || ( a_arg == null && 5 ) || ( isArray( a_arg ) && 6 ) || ( Buffer.isBuffer( a_arg ) && 9 ) || ( _type == 'object' && 7 ) || ( _type == 'function' && 8 ) || 0;
}
exports.typeofByIndex = typeofByIndex;

// 【 定义函数 】 - 判断数据类型 - 返回值为数据类型名称 ==========================================================================
function typeofByName( a_arg ) {
	let _type = typeof( a_arg );
	if ( _type == "object" ) {
		_type = a_arg == null ? null : isArray( a_arg ) ? "array" : Buffer.isBuffer( a_arg ) ? "buffer" : "object";
	}
	return _type;
	// let _dataNames = [ "unknow", "number", "string", "boolean", "undefined", "null", "array", "object", "function" ];
	// return _dataNames[ typeofByIndex( a_arg ) ];
}
exports.typeofByName = typeofByName;

// 【 定义函数 】 - 判断是否是数组类型 ==========================================================================================
function isArray( a_arg ) {
	return Object.prototype.toString.call( a_arg ) === '[object Array]';
}
exports.isArray = isArray;

// 【 定义函数 】 - 判断是否是JSON格式字符串 ====================================================================================
function isJsonString( a_str ) {
	if ( typeof( a_str ) != 'string' ) return false;
	try {
		if ( typeof JSON.parse( a_str ) == 'object' ) return true;
	} catch ( _e ) {}
	return false;
}
exports.isJsonString = isJsonString;

// 【 定义函数 】 - 判断是否是空对象 ============================================================================================
function isEmptyObject( a_arg ) {
	for ( let key in a_arg ) {
		return false;
	}
	return true;
}
exports.isEmptyObject = isEmptyObject;

// 【 定义函数 】 - 获取当前时间戳 ============================================================================================== 
function getTimestamp() {
	return parseInt( Date.now() );
}
exports.getTimestamp = getTimestamp;

// 【 定义函数 】 - 获取当前日期和时间的本地格式 =================================================================================
//let TimeZone = { "Europe/London":0, 'Asia/Shanghai':8, 'America/New_York':-5 };	// 时区校准数组
function now(){
	let _date = new Date();
	//_date.setHours( _date.getHours() + TimeZone[ "Asia/Shanghai" ] );			// 时区校正 - 已经自动校正？
	return _date.toLocaleString();
}
exports.now = now;

// 【 定义函数 】 - 获取随机数 ==================================================================================================
function getRandom( a_range ){
	a_range = a_range || 1000;			// 函数参数的默认值写法
	return Math.floor( Math.random() * a_range );
}
exports.getRandom = getRandom;

// 【 定义函数 】 - 根据 JSON 属性对数组进行排序，用法：let a = _array.sort( sortByJsonKey( 'id', true ) ); =======================
function sortByJsonKey( key, sortType )
{
	let _sorttype = arguments.length == 1 ? true : ~~arguments[ 0 ];	// 此句用于如果没有 sortType 参数传入，避免默认倒序排序 【 ~~ 的作用类似等同于 !!， 可以强制转换数据类型为 boolean 】，此句不能放入下面的函数体中，因为下面的函数中 arguments 指向的是下面函数自己的参数数组
	return function( a, b ){
		return ( _sorttype || sortType ) ? ~~( a[key] < b[key] ) : ~~( a[key] > b[key] );ssd
	};
}
exports.sortByJsonKey = sortByJsonKey;

// 【 定义函数 】 - 对数字类型数组进行排序，用法：let a = _array.sort( sortByNumber( true ) ); =============================
function sortByNumber( sortType )
{
	let _sorttype = arguments.length == 0 || ~~arguments[ 0 ];	// 此句用于如果没有 sortType 参数传入，避免默认倒序排序 【 ~~ 的作用类似等同于 !!， 可以强制转换数据类型为 boolean 】，此句不能放入下面的函数体中，因为下面的函数中 arguments 指向的是下面函数自己的参数数组
	return function( a, b ){
		return _sorttype ? ~(b - a) : ~(a - b);
	};
}
exports.sortByNumber = sortByNumber;

// 【 定义函数 】 - 判断单字符类型，返回值0到3依次是 0-特殊字符，1-数字，2-英文字母，3-汉字类型 ======================================
function detectCharType( a_letter ) {
	return ( !isNaN( a_letter ) && 1 ) || ( /[_a-zA-Z]/.test( a_letter ) && 2 ) || ( !/[^\u4E00-\u9FA5]/.test( a_letter ) && 3 ) || 0;
}
exports.detectCharType = detectCharType;

// 【 定义函数 】 - 返回汉字字符串的拼音首字母（大写） ============================================================================
function getFirstLetter( str ) {
	let pinyin_dict_firstletter = {};
	// 拼音首字母字典文件
	pinyin_dict_firstletter.all = "";	//20902个字符
	let dict = {};
	if ( !str || /^ +$/g.test( str ) ) return '';
	dict.firstletter = pinyin_dict_firstletter;
	if ( dict.firstletter )	// 使用首字母字典文件
	{
		let result = [];
		for ( let i = 0; i < str.length; i++ ) {
			let unicode = str.charCodeAt( i );
			let ch = str.charAt( i );
			if ( unicode >= 19968 && unicode <= 40869 ) {
				ch = dict.firstletter.all.charAt( unicode - 19968 );
			}
			result.push( ch );
		}
		return result.join( '' );
	}
}
exports.getFirstLetter = getFirstLetter;



// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- //



// 定义函数 - 心跳维护开关函数 ===================================================================================================== //
// function autoPing()
// {
// 	if ( heartbeatTimerRunning == false ) {					// 如果心跳维护未启动，则启动之
// 		heartbeatTimer = setInterval(
// 			function()
// 			{
// 				for ( let _svrName in svrsCenterList )
// 				{
// 					if ( svrsCenterList[ _svrName ] != null && svrsCenterList[ _svrName ][ "state" ] == 1 )		// 中央控制台伺服器存在且状态为 1，即：
// 					{
// 						svrsCenterList[ _svrName ][ "ws" ].send( 'i' );			// 发送心跳维护指令
// 					}
// 				}
// 				printf( '_____  /\\________  /\\_____________________  /\\________  /\\_______' );
// 				printf( '	 \\/		  \\/		heartbeat	  \\/		  \\/' );
// 			}, 1000 * autoPingInt 
// 		);
// 		heartbeatTimerRunning = true;
// 	}
// 	else {			// 如果心跳维护运行中，则停止，并把循环秒数计数器复位
// 		clearInterval( heartbeatTimer );
// 		heartbeatTimerRunning = false;
// 	}
// 	printf( '  Auto-ping status: [ ' + COLORS.inverse( ( heartbeatTimerRunning ) ? COLORS.green( 'true' ) : COLORS.red( 'false' ) ) + ' ]' );
// }

// // 定义 - 从 req 对象(IncomingMessage)中解析出报文头函数 =================================================================
// function parseHeaders( a_req )
// {
// 	let _protocol;
// 	switch ( a_req.headers.upgrade )
// 	{
// 		case "websocket":
// 			//printf( info.secure, 1 );						// 是否是安全连接，如果是安全的，则应该是"wss://"
// 			_protocol = "ws://";
// 			break;
// 	}
// 	return URL.parse( _protocol + a_req.headers.host + a_req.url, true );
// }


/*
// 【 定义函数 】 - 判断是否是数字类型 ==========================================================================================
function isNumber( a_arg ) { return typeof( a_arg ) == 'number'; }
exports.isNumber = isNumber;

// 【 定义函数 】 - 判断是否是字符串类型 ========================================================================================
function isString( a_arg ) { return typeof( a_arg ) == 'string'; }
exports.isString = isString;

// 【 定义函数 】 - 判断是否是布尔类型 ==========================================================================================
function isBoolean( a_arg ) { return typeof( a_arg ) == 'boolean'; }
exports.isBoolean = isBoolean;

// 【 定义函数 】 - 判断是否是未定义类型 ========================================================================================
function isUndefined( a_arg ) { return typeof( a_arg ) == 'undefined'; }
exports.isUndefined = isUndefined;
*/

/*
/*
function printf()
{
	if ( arguments.length < 1 || arguments.length > 2 ) return;					// js 中预定义了 arguments 变量，用于表示被传入的变量
	let _force = false;
	if ( arguments.length == 2 ) if ( arguments[ 1 ] == 1 ) _force = true;
	if ( debugMod || _force )			// 只要是在 debug 模式下或者是在强制显示模式下就打印出信息
	{
		lastDebugTxt = arguments[ 0 ];
		console.log( arguments[ 0 ] );
	}
}
*/
